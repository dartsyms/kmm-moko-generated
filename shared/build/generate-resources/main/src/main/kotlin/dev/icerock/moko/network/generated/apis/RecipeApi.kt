/**
* Recipe Puppy
* Recipe Puppy
*
* OpenAPI spec version: 1.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package dev.icerock.moko.network.generated.apis

import dev.icerock.moko.network.generated.models.ErrorModel
import dev.icerock.moko.network.generated.models.RecipeList

import io.ktor.client.HttpClient
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.request
import io.ktor.client.request.forms.FormDataContent
import io.ktor.http.ContentType
import io.ktor.http.HttpMethod
import io.ktor.http.Parameters
import io.ktor.http.takeFrom
import kotlinx.serialization.json.Json
import kotlinx.serialization.builtins.ListSerializer
import io.ktor.client.call.ReceivePipelineException
import io.ktor.http.content.TextContent

internal class RecipeApi(basePath: kotlin.String = "http://www.recipepuppy.com", httpClient: HttpClient, json: Json) {
    private val _basePath = basePath
    private val _httpClient = httpClient
    private val _json = json

    /**
    * Get Recipe
    * 
    * @param i Ingredient 
    * @param q Query (optional)
    * @param p Paging (optional)
    * @return RecipeList
    */
    @Suppress("UNCHECKED_CAST")
    suspend fun getRecipe(i: kotlin.String, q: kotlin.String?, p: kotlin.Int?) : RecipeList {
        val builder = HttpRequestBuilder()

        builder.method = HttpMethod.Get
        builder.url {
            takeFrom(_basePath)
            encodedPath = encodedPath.let { startingPath ->
                path("api/")
                return@let startingPath + encodedPath.substring(1)
            }
            @Suppress("UNNECESSARY_SAFE_CALL")
            with(parameters) {
                i?.let { append("i", it.toString()) }
                q?.let { append("q", it.toString()) }
                p?.let { append("p", it.toString()) }
            }
        }

        with(builder.headers) {
            append("Accept", "application/json")
        }

        try {
            //not primitive type
            val result: String = _httpClient.request(builder)
            return _json.decodeFromString(RecipeList.serializer(), result)
        } catch (pipeline: ReceivePipelineException) {
            throw pipeline.cause
        }
    }

}
